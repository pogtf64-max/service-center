#!/usr/bin/env python3
import subprocess
import os

def run_ssh_command(command):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SSH –∫–æ–º–∞–Ω–¥—É"""
    ssh_key = os.path.expanduser(r"~\.ssh\service_center")
    ssh_host = "root@77.110.127.57"
    
    cmd = ["ssh", "-i", ssh_key, ssh_host, command]
    result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8')
    return result

def fix_user_model():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å User"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –º–æ–¥–µ–ª—å User...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
    stop_result = run_ssh_command("docker stop service-center-service-center-1")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ models/user.py
    print("üìã –ü—Ä–æ–≤–µ—Ä—è—é models/user.py...")
    user_content = run_ssh_command("docker exec -i service-center-service-center-1 bash -c 'cd /app && cat models/user.py'")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ models/user.py:\n{user_content.stdout}")
    
    # –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å User –±–µ–∑ can_manage_settings
    correct_user = '''from models.database import db
from flask_login import UserMixin
from datetime import datetime

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    role = db.Column(db.String(20), nullable=False, default='user')
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120))
    phone = db.Column(db.String(20))
    service_id = db.Column(db.Integer, db.ForeignKey('services.id'))
    is_active = db.Column(db.Boolean, default=True)
    is_approved = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)
    
    def __repr__(self):
        return f'<User {self.username}>'
'''
    
    # –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    print("üìù –°–æ–∑–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å User –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    create_cmd = f"cat > /tmp/user_correct.py << 'EOF'\n{correct_user}\nEOF"
    create_result = run_ssh_command(create_cmd)
    
    if create_result.returncode == 0:
        # –°–∫–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        print("üìã –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
        copy_result = run_ssh_command("docker cp /tmp/user_correct.py service-center-service-center-1:/app/models/user.py")
        
        if copy_result.returncode == 0:
            print("‚úÖ –ú–æ–¥–µ–ª—å User –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
            
            # –ó–∞–ø—É—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
            start_result = run_ssh_command("docker start service-center-service-center-1")
            
            if start_result.returncode == 0:
                print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                
                # –ü–æ–¥–æ–∂–¥–µ–º
                import time
                time.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å
                status = run_ssh_command("docker ps | grep service-center-service-center-1")
                print(f"–°—Ç–∞—Ç—É—Å: {status.stdout}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏
                logs = run_ssh_command("docker logs service-center-service-center-1 --tail 10")
                print(f"–õ–æ–≥–∏: {logs.stdout}")
                
                if "Running on" in logs.stdout:
                    print("üéâ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –û—à–∏–±–∫–∞ 502 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                else:
                    print("‚ùå Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {start_result.stderr}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {copy_result.stderr}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {create_result.stderr}")

if __name__ == "__main__":
    fix_user_model()
