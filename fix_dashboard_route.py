#!/usr/bin/env python3
import subprocess
import os

def run_ssh_command(command):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SSH –∫–æ–º–∞–Ω–¥—É"""
    ssh_key = os.path.expanduser(r"~\.ssh\service_center")
    ssh_host = "root@77.110.127.57"
    
    cmd = ["ssh", "-i", ssh_key, ssh_host, command]
    result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8')
    return result

def fix_dashboard_route():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç /dashboard"""
    print("üîß –ò–°–ü–†–ê–í–õ–Ø–Æ –ú–ê–†–®–†–£–¢ /dashboard")
    print("=" * 40)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
    run_ssh_command("docker stop service-center-service-center-1")
    
    # –°–æ–∑–¥–∞–¥–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º
    fixed_app = '''from flask import Flask, redirect, url_for
from flask_login import LoginManager
from models.database import db
from models.user import User
from routes.auth import auth_bp
from routes.dashboard import dashboard_bp
from routes.clients import clients_bp
from routes.orders import orders_bp
from routes.parts import parts_bp
from routes.devices import devices_bp
from routes.archive import archive_bp
from routes.services import services
from routes.devtools import devtools_bp

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///service_center.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'auth.login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(dashboard_bp, url_prefix="/dashboard")
app.register_blueprint(clients_bp, url_prefix="/clients")
app.register_blueprint(orders_bp, url_prefix="/orders")
app.register_blueprint(parts_bp, url_prefix="/parts")
app.register_blueprint(devices_bp, url_prefix="/devices")
app.register_blueprint(archive_bp, url_prefix="/archive")
app.register_blueprint(services, url_prefix="/services")
app.register_blueprint(devtools_bp, url_prefix="/devtools")

@app.route('/')
def index():
    return redirect(url_for('dashboard.index'))

# –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–Ø–ú–û–ô –ú–ê–†–®–†–£–¢ /dashboard
@app.route('/dashboard')
def dashboard_redirect():
    return redirect(url_for('dashboard.index'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0', port=8080, debug=True)
'''
    
    # –°–æ–∑–¥–∞–¥–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    print("üìù –°–æ–∑–¥–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app.py...")
    create_cmd = f"cat > /tmp/app_fixed.py << 'EOF'\n{fixed_app}\nEOF"
    create_result = run_ssh_command(create_cmd)
    
    if create_result.returncode == 0:
        # –°–∫–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        print("üìã –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
        copy_result = run_ssh_command("docker cp /tmp/app_fixed.py service-center-service-center-1:/app/app.py")
        
        if copy_result.returncode == 0:
            print("‚úÖ app.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
            
            # –ó–∞–ø—É—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
            start_result = run_ssh_command("docker start service-center-service-center-1")
            
            if start_result.returncode == 0:
                print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                
                # –ü–æ–¥–æ–∂–¥–µ–º
                import time
                time.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –º–∞—Ä—à—Ä—É—Ç—ã
                print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ä—à—Ä—É—Ç—ã...")
                routes_check = run_ssh_command("docker exec -i service-center-service-center-1 bash -c 'cd /app && python -c \"from app import app; print(\\\"–ú–∞—Ä—à—Ä—É—Ç—ã:\\\"); [print(f\\\"{rule.rule} -> {rule.endpoint}\\\") for rule in app.url_map.iter_rules() if \\\"dashboard\\\" in rule.rule]\"'")
                print(f"Dashboard –º–∞—Ä—à—Ä—É—Ç—ã: {routes_check.stdout}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
                print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–∞—Ä—à—Ä—É—Ç /dashboard...")
                test_result = run_ssh_command("curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/dashboard")
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ /dashboard: {test_result.stdout}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
                print("üåê –¢–µ—Å—Ç–∏—Ä—É—é –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø...")
                external_test = run_ssh_command("curl -s -o /dev/null -w '%{http_code}' https://miservis27.ru/dashboard")
                print(f"–í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø /dashboard: {external_test.stdout}")
                
                if test_result.stdout == "302" or test_result.stdout == "200":
                    print("üéâ –ú–ê–†–®–†–£–¢ /dashboard –ò–°–ü–†–ê–í–õ–ï–ù!")
                    print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ https://miservis27.ru/dashboard")
                else:
                    print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_result.stdout}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {start_result.stderr}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {copy_result.stderr}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {create_result.stderr}")

if __name__ == "__main__":
    fix_dashboard_route()
